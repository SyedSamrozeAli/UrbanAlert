import mongoose from "mongoose"

const adminSchema = new mongoose.Schema({
    role: {
        type: String,
        require: true,
        default: "Admin",
    },
    fullName: {
        type: String,
        require: true,
    },
    username: {
        type: String,
        require: true,
        unique: true,
    },
    email: {
        type: String,
        require: true,
        unique: true,
    },
    salt: {
        type: String,
    },
    password: {
        type: String,
        required: true,
    },
    profileImageURL: {
        type: String,
        default: '/uploads/profile-images/default.png'
    },

    notifications: [
        {
            type: mongoose.Schema.Types.ObjectId,
            ref: "Notifications",
        }
    ]

}, { timestamps: true });

adminSchema.pre("save", function (next) {
    const admin = this;

    if (!admin.isModified("password")) {
        return next();
    }

    const salt = randomBytes(16).toString("hex");
    const hashPassword = createHmac("sha256", salt)
        .update(admin.password)
        .digest("hex");

    this.salt = salt;
    this.password = hashPassword;

    next();
});

adminSchema.static("matchPassword", async function (email, password) {
    const admin = await this.findOne({ email });
    if (!admin) return false;

    const salt = admin.salt;
    const hashPassword = admin.password;

    // generate the password using the salt of the given admin
    const adminProvidedHash = createHmac("sha256", salt)
        .update(password)
        .digest("hex");

    //we now match the password in the database with the password generated by the admin's salt
    if (hashPassword != adminProvidedHash) return null;

    return { ...admin._doc, password: undefined, salt: undefined };
});
const adminModel = mongoose.model("Admin", adminSchema);
export default adminModel;